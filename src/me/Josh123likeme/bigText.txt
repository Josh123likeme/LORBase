package me.Josh123likeme.LORBase;

import me.Josh123likeme.LORBase.Types.*;

public class FrameData {

	public int Height;
	public int Width;
	public double DeltaFrame;
	
	public Vector2D CameraPosition;
	public double GuiScale;
	
	public FrameData() {}
	
}

package me.Josh123likeme.LORBase;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import me.Josh123likeme.LORBase.EntityHolder.Player;
import me.Josh123likeme.LORBase.InputListener.KeyboardWitness;
import me.Josh123likeme.LORBase.InputListener.MouseWitness;
import me.Josh123likeme.LORBase.Types.Direction;
import me.Josh123likeme.LORBase.Types.Vector2D;

public class Game extends Canvas implements Runnable {

	private static final long serialVersionUID = 1L;

	public static final int INITIAL_WIDTH = 400, INITIAL_HEIGHT = 400;
	
	private Window window;
	private Thread thread;
	private boolean running = false;
	
	private MouseWitness mouseWitness;
	private KeyboardWitness keyboardWitness;
	private FrameData frameData;
	
	public World world;
	
	private static Random random = new Random();
	
	private int fps = 0;
	private Vector2D camPos;
	private double guiScale;
	
	private Player player;
	
	public Game() {
		
		window = new Window(INITIAL_WIDTH, INITIAL_HEIGHT, "The Labyrinth Of Recursion", this);
		frameData = new FrameData();
		camPos = new Vector2D(50, 50);
		guiScale = 0.5d;
		player = new Player(new Vector2D(1, 1), Direction.NORTH);
		world = new World(player);
		
		initInputs();
		
	}
	
	public void initInputs() {
		
		mouseWitness = new MouseWitness();
		keyboardWitness = new KeyboardWitness();
		
		addMouseListener(mouseWitness);
		addMouseMotionListener(mouseWitness);
		addKeyListener(keyboardWitness);
		
		requestFocus();
		
	}
	
	public synchronized void start() {
		
		thread = new Thread(this);
		thread.start();
		running = true;
		
	}
	
	public synchronized void stop() {
		
		try 
		{
			thread.join();
			running = false;
		}
		
		catch(Exception e) {e.printStackTrace();}
		
	}
	
	public void run() {

		double targetfps = 10000000d;
		long targetDeltaFrame = Math.round((1d / targetfps) * 1000000000);
		long lastSecond = System.nanoTime();
		int frames = 0;
		
		long lastFrame = 0;
		
		updateFrameData();
		
		frameData.DeltaFrame = targetDeltaFrame;
		
		while (running) {
			
			frames++;
			
			if (lastSecond + 1000000000 < System.nanoTime()) {
				
				fps = frames;
				
				frames = 0;
				
				lastSecond = System.nanoTime();
				
				//updateInfrequent();
				
			}
			
			//starting to push frame
			
			long nextTime = System.nanoTime() + targetDeltaFrame;
			
			updatePlayer();
			
			frameData.DeltaFrame = ((double) (System.nanoTime() - lastFrame)) / 1000000000;
			
			frameData.CameraPosition.X = player.getPosition().X;
			frameData.CameraPosition.Y = player.getPosition().Y;
			
			updateFrameData();
			
			lastFrame = System.nanoTime();
			
			paint();
			
			//finished pushing frame
			
			while (nextTime > System.nanoTime());
			
		}
		stop();
		
	}

	private void paint() {
	
		BufferStrategy bufferStrategy = this.getBufferStrategy();
		if(bufferStrategy == null) {
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = bufferStrategy.getDrawGraphics();
		
		//basic black background to stop flashing
		g.setColor(Color.black); 
		g.fillRect(0, 0, getWidth(), getHeight());
		
		//put rendering stuff here
		
		world.render(g);
		
		if (keyboardWitness.getHeldKeys().contains(61)) {
			
			guiScale += 0.01;
			
		}
		else if (keyboardWitness.getHeldKeys().contains(45)) {
			
			guiScale -= 0.01;
			
		}
		
		//debugging stuff
		
		ArrayList<String> debugInfo = new ArrayList<String>();
				
		debugInfo.add("FPS: " + fps + " (Delta Frame: " + frameData.DeltaFrame + ")");
		
		debugInfo.add("Is Dragging: " + mouseWitness.isDragging());
		
		String keysPressed = "";
		
		List<Integer> keys = keyboardWitness.getHeldKeys();
		
		for (int i = 0; i < keys.size(); i++) {
			
			keysPressed += KeyEvent.getKeyText(keys.get(i)) + ", ";
			
		}
		
		debugInfo.add("Keys pressed: " + keysPressed);
		
		debugInfo.add("Player Pos: (" + player.getPosition().X + ", " + player.getPosition().Y + ") Facing: " + player.getFacing());
		
		debugInfo.add("Camera Pos: (" + frameData.CameraPosition.X + ", " + frameData.CameraPosition.Y + ")");
		
		g.setFont(new Font("", 0, getHeight() / 25));
		
		g.setColor(Color.white);
		
		for (int i = 0; i < debugInfo.size(); i++) {
			
			g.drawString(debugInfo.get(i), getWidth() / 100, (getHeight() / 25) * (i + 1));
			
		}
		
		//this pushes the graphics to the window
		bufferStrategy.show();
		
	}
	
	private void updateFrameData() {
		
		frameData.Width = getWidth();
		frameData.Height = getHeight();
		
		frameData.CameraPosition = camPos;
		frameData.GuiScale = guiScale;
		
	}
	
	public FrameData getFrameData() {
		
		return frameData;
		
	}
	
	private void updatePlayer() {
		
		List<Integer> keys = keyboardWitness.getHeldKeys();
		
		Vector2D movementVector = new Vector2D(0, 0);
		
		if (keys.contains(87)) movementVector.Y -= 1;
		if (keys.contains(65)) movementVector.X -= 1;
		if (keys.contains(83)) movementVector.Y += 1;
		if (keys.contains(68)) movementVector.X += 1;

		movementVector.normalise();
		
		movementVector.X = movementVector.X * player.getMovementSpeed() * frameData.DeltaFrame;
		movementVector.Y = movementVector.Y * player.getMovementSpeed() * frameData.DeltaFrame;
		
		player.moveEntity(new Vector2D(player.getPosition().X + movementVector.X, player.getPosition().Y + movementVector.Y));

		if (movementVector.X == 0 && movementVector.Y < 0) player.setFacing(Direction.NORTH);
		if (movementVector.X == 0 && movementVector.Y > 0) player.setFacing(Direction.SOUTH);
		if (movementVector.X > 0 && movementVector.Y == 0) player.setFacing(Direction.EAST);
		if (movementVector.X < 0 && movementVector.Y == 0) player.setFacing(Direction.WEST);
		
	}
	
	private void updateInfrequent() {
		
		
		
	}
	
}

package me.Josh123likeme.LORBase;

import java.util.Random;

import me.Josh123likeme.LORBase.Types.*;

public abstract class Generators {

	private static Random random = new Random();
	
	public static Boolean[][] generateRandomMaze(int width, int height) {
		
		Boolean[][] maze = new Boolean[height][width];
		
		for (int i = 0; i < maze[0].length; i++) {
			
			maze[0][i] = true;
			
		}
		
		for (int y = 1; y < maze.length - 1; y++) {
			
			maze[y][0] = true;
			
			for (int x = 1; x < maze[0].length - 1; x++) {
				
				maze[y][x] = false;
				
			}
			
			maze[y][maze[0].length - 1] = true;
			
		}
		
		for (int i = 0; i < maze[0].length; i++) {
			
			maze[maze.length - 1][i] = true;
			
		}
		
		goForward(new Vector2D(2, (int) (2 * (height / 4))), new Vector2D(1,0), maze);
		
		return maze;
		
	}
	
	private static void goForward(Vector2D pos, Vector2D dir, Boolean[][] maze) {
		
		int maxDistance = maxDistance(pos, dir, maze);
		
		if (maxDistance <= 0) return;
		
		int distance = 2 * random.nextInt(10);
		
		if (distance > maxDistance) distance = maxDistance;
			
		for (int i = 0; i < distance; i++) {
			
			pos.X += dir.X;
			pos.Y += dir.Y;
				
			maze[(int) pos.Y][(int) pos.X] = true;
			
		}
		
		int[] order = new int[] {0,1,2,3};
		
		for (int i = 0; i < 10; i++) {
			
			int one = random.nextInt(4);
			int two = random.nextInt(4);
			
			int temp = order[one];			
			order[one] = order[two];			
			order[two] = temp;
			
		}
		
		for (int i = 0; i < order.length; i++) {
			
			switch (order[i]) {
			
			case 0:
				
				goForward(new Vector2D(pos.X, pos.Y), new Vector2D(1,0), maze);
				
				break;
				
			case 1:
				
				goForward(new Vector2D(pos.X, pos.Y), new Vector2D(-1,0), maze);
				
				break;
				
			case 2:
				
				goForward(new Vector2D(pos.X, pos.Y), new Vector2D(0,-1), maze);
				
				break;
				
			case 3:
				
				goForward(new Vector2D(pos.X, pos.Y), new Vector2D(0,1), maze);
				
				break;
			
			}
			
		}
		
	}
	
	private static int maxDistance(Vector2D pos, Vector2D dir, Boolean[][] maze) {
		
		int x = (int) pos.X;
		int y = (int) pos.Y;
		
		int distance = 0;
		
		do  {	
			
			x += 2 * dir.X;
			y += 2 * dir.Y;
			
			distance += 2;

		}
		while (!maze[y][x]);
		
		return distance - 2;
		
	}
	
}

package me.Josh123likeme.LORBase;

import java.io.IOException;

import me.Josh123likeme.LORBase.Types.*;

public class Main {

	public static Game game;
	
	public static void main(String[] args) {
		
		try {
			ResourceLoader.loadResources();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
		game = new Game();
		
		game.start();
		
	}
	
}

package me.Josh123likeme.LORBase;

import java.util.HashMap;
import java.awt.Graphics2D;
import java.awt.image.*;
import java.io.IOException;
import java.awt.geom.AffineTransform;

import me.Josh123likeme.LORBase.BlockHolder.Floor;
import me.Josh123likeme.LORBase.BlockHolder.Wall;
import me.Josh123likeme.LORBase.EntityHolder.Entity;

public abstract class ResourceLoader {

	private static HashMap<Floor, BufferedImage> floorTextures = new HashMap<Floor, BufferedImage>();
	private static HashMap<Wall, BufferedImage> wallTextures = new HashMap<Wall, BufferedImage>();
	private static HashMap<Entity, BufferedImage> entityTextures = new HashMap<Entity, BufferedImage>();
	
	public static void loadResources() throws IOException {
		
		floorTextures = Floor.loadTextures();
		wallTextures = Wall.loadTextures();
		entityTextures = Entity.loadTextures();
		
	}
	
	public static BufferedImage getTexture(Floor floor) {
		
		return floorTextures.get(floor);
		
	}
	
	public static BufferedImage getTexture(Wall wall) {
		
		return wallTextures.get(wall);
		
	}

	public static BufferedImage getTexture(Entity entity) {
	
	return entityTextures.get(entity);
	
	}
	
	public static BufferedImage copyImage(BufferedImage source){
		
		//courtesy of clic on stack overflow
		
	    BufferedImage bi = new BufferedImage(source.getWidth(), source.getHeight(), source.getType());
	    byte[] sourceData = ((DataBufferByte)source.getRaster().getDataBuffer()).getData();
	    byte[] biData = ((DataBufferByte)bi.getRaster().getDataBuffer()).getData();
	    System.arraycopy(sourceData, 0, biData, 0, sourceData.length);
	    return bi;
	}
	
	public static BufferedImage rotateImageByDegrees(BufferedImage source, double angle) {
		
		//courtesy of MadProgrammer on stack overflow
		
		double rads = Math.toRadians(angle);
	    double sin = Math.abs(Math.sin(rads)), cos = Math.abs(Math.cos(rads));
	    int w = source.getWidth();
	    int h = source.getHeight();
	    int newWidth = (int) Math.floor(w * cos + h * sin);
	    int newHeight = (int) Math.floor(h * cos + w * sin);

	    BufferedImage rotated = new BufferedImage(newWidth, newHeight, BufferedImage.TYPE_INT_ARGB);
	    Graphics2D g2d = rotated.createGraphics();
	    AffineTransform at = new AffineTransform();
	    at.translate((newWidth - w) / 2, (newHeight - h) / 2);

	    int x = w / 2;
	    int y = h / 2;

	    at.rotate(rads, x, y);
	    g2d.setTransform(at);
	    g2d.drawImage(source, 0, 0, null);
	    g2d.dispose();

	    return rotated;
		
	}
	
}

package me.Josh123likeme.LORBase;

import java.awt.Canvas;
import java.awt.Dimension;

import javax.swing.JFrame;


public class Window extends Canvas {

	private static final long serialVersionUID = -259832267823304864L;
	
	public Window(int width, int height, String title, Game game) {
		
		JFrame frame = new JFrame(title);
		
		frame.setPreferredSize(new Dimension(width, height));
		frame.setMaximumSize(new Dimension(width, height));
		frame.setMinimumSize(new Dimension(0, 0));	
		frame.setSize(width, height);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(true);
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);
		frame.add(game);	
		
	}
	
}

package me.Josh123likeme.LORBase;

import me.Josh123likeme.LORBase.BlockHolder.*;
import me.Josh123likeme.LORBase.EntityHolder.EntityBase;
import me.Josh123likeme.LORBase.EntityHolder.Player;
import me.Josh123likeme.LORBase.Types.Direction;
import me.Josh123likeme.LORBase.Types.Vector2D;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

public class World {
	
	public Floor[][] floor = new Floor[101][101];
	public Wall[][] wall = new Wall[101][101];
	
	ArrayList<EntityBase> entities = new ArrayList<EntityBase>();
	
	public World(Player player) {
		
		entities.add(player);
		
		//for testing \/
		
		Boolean[][] maze = Generators.generateRandomMaze(101, 101);
		
		for (int y = 0; y < floor.length; y++) {
			
			for (int x = 0; x < floor[0].length; x++) {
				
				if (maze[y][x]) wall[y][x] = Wall.LABYRINTH_WALL;
				
				else floor[y][x] = Floor.LABYRINTH_FLOOR;

			}
			
		}
		
		// /\
		
	}
	
	public void render(Graphics g) {
		
		FrameData frameData = Main.game.getFrameData();
		
		Vector2D cameraPos = frameData.CameraPosition;
		
		int BlocksOnScreenX = (int) Math.ceil(frameData.Width / (16 * frameData.GuiScale));
		int BlocksOnScreenY = (int) Math.ceil(frameData.Height / (16 * frameData.GuiScale));
		
		BlocksOnScreenX++;
		BlocksOnScreenY++;
		
		int tlx = (int) Math.floor(frameData.CameraPosition.X) - BlocksOnScreenX / 2;
		int tly = (int) Math.floor(frameData.CameraPosition.Y) - BlocksOnScreenY / 2;
		int brx = (int) Math.ceil(frameData.CameraPosition.X) + BlocksOnScreenX / 2;
		int bry = (int) Math.ceil(frameData.CameraPosition.Y) + BlocksOnScreenY / 2;
		
		if (tlx < 0) tlx = 0;
		if (tly < 0) tly = 0;
		if (brx > floor[0].length - 1) brx = floor[0].length - 1;
		if (bry > floor.length - 1) bry = floor.length - 1;
		
		for (int y = tly; y < bry; y++) {
			
			for (int x = tlx; x < brx; x++) {
				
				g.drawImage(ResourceLoader.getTexture(floor[y][x]),
						(int) (x * 16 * frameData.GuiScale - frameData.CameraPosition.X * 16 * frameData.GuiScale) + frameData.Width / 2,
						(int) (y * 16 * frameData.GuiScale - frameData.CameraPosition.Y * 16 * frameData.GuiScale) + frameData.Height / 2, 
						(int) (16 * frameData.GuiScale + 1),
						(int) (16 * frameData.GuiScale + 1),
						null);

			}
			
		}
		
		for (int y = tly; y < bry; y++) {
			
			for (int x = tlx; x < brx; x++) {
				
				g.drawImage(ResourceLoader.getTexture(wall[y][x]),
						(int) (x * 16 * frameData.GuiScale - frameData.CameraPosition.X * 16 * frameData.GuiScale) + frameData.Width / 2,
						(int) (y * 16 * frameData.GuiScale - frameData.CameraPosition.Y * 16 * frameData.GuiScale) + frameData.Height / 2, 
						(int) (16 * frameData.GuiScale + 1),
						(int) (16 * frameData.GuiScale + 1),
						null);

			}
			
		}
		
		g.drawImage(ResourceLoader.getTexture(Floor.MOGUS),
				(int) (1 * 16 * frameData.GuiScale - frameData.CameraPosition.X * 16 * frameData.GuiScale) + frameData.Width / 2,
				(int) (1 * 16 * frameData.GuiScale - frameData.CameraPosition.Y * 16 * frameData.GuiScale) + frameData.Height / 2, 
				(int) (16 * frameData.GuiScale + 1),
				(int) (16 * frameData.GuiScale + 1),
				null);
		
		for (EntityBase entity : entities) {
			
			int degrees = 0;
			
			if (entity.getFacing() == Direction.EAST) degrees = 90;
			if (entity.getFacing() == Direction.SOUTH) degrees = 180;
			if (entity.getFacing() == Direction.WEST) degrees = 270;
			
			BufferedImage texture = ResourceLoader.rotateImageByDegrees(ResourceLoader.getTexture(entity.type), degrees);
			
			g.drawImage(texture,
					(int) (entity.getPosition().X * 16 * frameData.GuiScale - frameData.CameraPosition.X * 16 * frameData.GuiScale) + frameData.Width / 2,
					(int) (entity.getPosition().Y * 16 * frameData.GuiScale - frameData.CameraPosition.Y * 16 * frameData.GuiScale) + frameData.Height / 2, 
					(int) (16 * frameData.GuiScale + 1),
					(int) (16 * frameData.GuiScale + 1),
					null);
			
		}
		
	}
	
	public void updateInfrequent() {
		
		for (EntityBase entity : entities) {
			
		}
		
	}
	
}

package me.Josh123likeme.LORBase.BlockHolder;

import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.*;

import assets.Assets;
import me.Josh123likeme.LORBase.ResourceLoader;

public enum Floor {

	LABYRINTH_FLOOR("LABYRINTH_FLOOR.png"),
	MOGUS("MOGUS.png"), //for testing high res textures
	
	;
	
	String texturePath;
	
	Floor(String texturePath){
		
		this.texturePath = texturePath;
		
	}
	
	public static HashMap<Floor, BufferedImage> loadTextures() throws IOException {
		
		HashMap<Floor, BufferedImage> textures = new HashMap<Floor, BufferedImage>();
		
		for (int i = 0; i < Floor.values().length; i++) {
			
			BufferedImage image = null;
				
		    image = Assets.LoadTextureFromAssets("./textures/block/" + Floor.values()[i].texturePath);
			
			textures.put(Floor.values()[i], image);
			
		}
		
		return textures;
		
	}
	
}

package me.Josh123likeme.LORBase.BlockHolder;

import java.awt.image.*;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.*;

import assets.Assets;
import me.Josh123likeme.LORBase.ResourceLoader;

public enum Wall {

	LABYRINTH_WALL("LABYRINTH_WALL.png"),
	
	;
	
	String texturePath;
	
	Wall(String texturePath){
		
		this.texturePath = texturePath;
		
	}
	
	public static HashMap<Wall, BufferedImage> loadTextures() throws IOException {
		
		HashMap<Wall, BufferedImage> textures = new HashMap<Wall, BufferedImage>();
		
		for (int i = 0; i < Wall.values().length; i++) {
			
			BufferedImage image = null;
			
			image = Assets.LoadTextureFromAssets("./textures/block/" + Wall.values()[i].texturePath);
			
			textures.put(Wall.values()[i], image);
			
		}
		
		return textures;
		
	}
	
}

package me.Josh123likeme.LORBase.EntityHolder;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;

import javax.imageio.ImageIO;

import assets.Assets;
import me.Josh123likeme.LORBase.ResourceLoader;
import me.Josh123likeme.LORBase.BlockHolder.Floor;
import me.Josh123likeme.LORBase.BlockHolder.Wall;

public enum Entity {

	PLAYER("PLAYER.png"),
	
	;
	
	
	String texturePath;
	
	Entity(String texturePath){
		
		this.texturePath = texturePath;
		
	}
	
	public static HashMap<Entity, BufferedImage> loadTextures() throws IOException {
		
		HashMap<Entity, BufferedImage> textures = new HashMap<Entity, BufferedImage>();
		
		for (int i = 0; i < Entity.values().length; i++) {
			
			BufferedImage image = null;

		    image = Assets.LoadTextureFromAssets("./textures/entity/" + Entity.values()[i].texturePath);
			
			textures.put(Entity.values()[i], image);
			
		}
		
		return textures;
		
	}
	
}

package me.Josh123likeme.LORBase.EntityHolder;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;

import me.Josh123likeme.LORBase.Main;
import me.Josh123likeme.LORBase.ResourceLoader;
import me.Josh123likeme.LORBase.BlockHolder.Wall;
import me.Josh123likeme.LORBase.Types.*;

public abstract class EntityBase {
	
	public final Entity type;	
	private final double size;
	
	private Vector2D pos;
	private double baseMovementSpeed; // m/s
	private double movementSpeed;
	private Direction facing;
	
	public EntityBase(Vector2D initPos, Entity type, double baseMovementSpeed, double size, Direction facing){
		
		pos = initPos;
		this.type = type;
		this.baseMovementSpeed = baseMovementSpeed;
		this.size = size;
		this.facing = facing;
		
	}
	
	public Vector2D getPosition() {
		
		return pos;
		
	}
	
	public double getMovementSpeed() {
		
		return baseMovementSpeed;
		
	}
	
	public Direction getFacing() {
		
		return facing;
		
	}
	
	public void setFacing(Direction facing) {
		
		this.facing = facing;
		
	}
	
	public void moveEntity(Vector2D pos) {
		
		double x = pos.X;
		double y = pos.Y;
		
		if (this instanceof ICollidable) {
			
			if (Main.game.world.wall[(int) y][(int) x] != null || Main.game.world.wall[(int) (y + size)][(int) (x + size)] != null) {
				
				//move as far as possible
				
			}
			else {
				
				this.pos = pos;
				
			}
			
		}
		else {
			
			this.pos = pos;
			
		}
		
	}

}

package me.Josh123likeme.LORBase.EntityHolder;

public interface ICollidable {
	
}

package me.Josh123likeme.LORBase.EntityHolder;

import me.Josh123likeme.LORBase.Types.*;

public class Player extends EntityBase implements ICollidable {
	
	public Player(Vector2D initPos, Direction facing) {
		super(initPos, Entity.PLAYER, 5, 0.8, facing);
		
	}
	
}

package me.Josh123likeme.LORBase.InputListener;

import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class KeyboardWitness implements KeyListener {

	private ArrayList<Integer> keysPressed = new ArrayList<Integer>();
	
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		
		if (!keysPressed.contains(e.getKeyCode())) keysPressed.add(e.getKeyCode());
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		
		try {
			
			keysPressed.removeAll(Collections.singleton(e.getKeyCode()));
			
		}
		catch (Exception exception) {}
		
	}
	
	public List<Integer> getHeldKeys(){
		
		return keysPressed;
		
	}

}

package me.Josh123likeme.LORBase.InputListener;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

public class MouseWitness implements MouseListener, MouseMotionListener {

	private int mouseX, mouseY;
	private boolean dragging;
	
	@Override
	public void mouseDragged(MouseEvent e) {
		
		mouseX = e.getX();
		mouseY = e.getY();
		
	}

	@Override
	public void mouseMoved(MouseEvent e) {
		
		dragging = false;
		
		mouseX = e.getX();
		mouseY = e.getY();
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		/*
		
		 if (e.getButton() == MouseEvent.BUTTON1)
		 
		 */
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		dragging = true;
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		dragging = false;
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	public int getMouseX() {
		
		return mouseX;
		
	}
	
	public int getMouseY() {
		
		return mouseY;
		
	}
	
	public boolean isDragging() {
		
		return dragging;
		
	}
	
}

package me.Josh123likeme.LORBase.Types;

public enum Direction {

	NORTH(),
	EAST(),
	SOUTH(),
	WEST()
	
	;
	
}

package me.Josh123likeme.LORBase.Types;

public class Vector2D {
	
	public double X, Y;
	
	public Vector2D(double x, double y) {
		
		X = x;
		Y = y;
		
	}
	
	public void normalise() {
		
		double mod = Math.sqrt(X*X + Y*Y);
		
		if (mod == 0) return;
		
		X = X / mod;
		Y = Y / mod;
		
	}

}

